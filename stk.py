# -*- coding: utf-8 -*-
"""T-2 Stock Market Prediction Using Stacked LSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mr4r5rnWGVdiONiuYHYICNcaYvufURWn

# **Task-2 Stock Market Prediction Using Stacked LSTM**

**Name:- Kalparatna Mahajan**

**Importing Libreries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler

"""**Reading Dataset**"""

tf = pd.read_csv("NSE-TATAGLOBAL.csv")

tf.head()

tf.tail()

"""**Display Basic Statistics About Data**"""

tf.describe()

"""**Sort Data**

check for null values
"""

NAN = [(c, tf[c].isnull().mean()*100 )for c in tf]
NAN = pd.DataFrame(NAN, columns = [' colums_name', 'percentage'])
NAN

sort = tf.sort_values(by = 'Date')
sort.head()

sort.reset_index(inplace = True)

sort.head()

"""**Data Visualization**

Plot the graph for the Date and close
"""

plt.figure(figsize=(10,7))
plt.plot(sort['Date'], sort['Close'])

close_sort = sort['Close']
close_sort

"""**Features Scale(MinMax Scaler)**"""

scaler = MinMaxScaler(feature_range =(0,1))
close_sort =scaler.fit_transform(np.array(close_sort).reshape(-1, 1))
close_sort

"""**Split Dataset**"""

train_size = int (len(close_sort)*0.7)
test_size = len(close_sort)-train_size
train_data,test_data = close_sort[0:train_size,:], close_sort[train_size:len(close_sort),:1]

train_data.shape

test_data.shape

"""**Convert an array of values intoa dataset matrix**"""

def create_dataset(dataset, time_step = 1):
  dataX, dataY = [],[]
  for  i in range(len(dataset)-time_step-1):
    a = dataset[i:(i+time_step), 0]
    dataX.append(a)
    dataY.append(dataset[i + time_step, 0])
  return np.array(dataX), np.array(dataY)

"""**Reshape of Dataset**"""

time_step = 100
x_train, y_train = create_dataset(train_data, time_step)
x_test, y_test = create_dataset(test_data, time_step)

print(x_train.shape), print(y_train.shape)

print(x_test.shape), print(y_test.shape)

x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)

x_train

"""**Create the Stacked LSTM Model**"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

"""**Create LSTM model**"""

model = Sequential()
model.add(LSTM(50, return_sequences = True, input_shape = (100 , 1)))
model.add(LSTM(50,return_sequences = True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss ='mean_squared_error',optimizer = 'adam')

model.summary()

"""**Prediction and Checking Performance **"""

model.fit(x_train, y_train, validation_split = 0.1, epochs =60, batch_size = 64, verbose=1)

train_predict = model.predict(x_train)
test_predict=model.predict(x_test)

train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

"""**Calculate Performance**"""

import math
from sklearn.metrics import mean_squared_error

math.sqrt(mean_squared_error(y_train, train_predict))

math.sqrt(mean_squared_error(y_test, test_predict))

"""**Plot the graph with predicted train data, tes twith actual data**"""

lool_back = 100

trainPredictPlot = np.empty_like(close_sort)
trainPredictPlot[:, :] =np.nan
trainPredictPlot[lool_back: len(train_predict)+ lool_back, :] = train_predict

testPredictPlot = np.empty_like(close_sort)
testPredictPlot[:, :] =np.nan
testPredictPlot[len(train_predict) + (lool_back*2)+1:len(close_sort)-1, : ]  = test_predict

plt.figure(figsize = (10, 7))
plt.plot(scaler.inverse_transform(close_sort))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

"""**Prediction For Next 30 days**"""

len(test_data)

pred_input = test_data[511:].reshape(1, -1)
pred_input.shape

temp_input = list(pred_input)
temp_input = temp_input[0].tolist()

temp_input

lst_output = []
n_steps = 100
i = 0
while(i<30):

  if(len(temp_input)>100):
    pred_input = np.array(temp_input[1:])
    print("{}day Input".format(i,pred_input))
    pred_input = pred_input.reshape(1, -1)
    #pred_input = pred_input.reshape((1, n_steps, 1))

   # yhat = model.predict(pred_input, verbose = 0)
    print("{}dat output {}". format(i, yhat))
    temp_input.extend(yhat[0].tolist())
    temp_input = temp_input[1:]

    lst_output.extend(yhat.tolist())
    i = i + 1
  else:
    pred_input = pred_input.reshape((1, n_steps, 1))
    yhat = model.predict(pred_input,verbose = 0)
    print(yhat[0])
    temp_input. extend(yhat[0]. tolist())
    print(len(temp_input))
    lst_output.extend(yhat.tolist())
    i = i +1

print(lst_output)

"""**Plot last 130 days Closing Price **"""

day_new = np.arange(1, 101)
day_pred = np.arange(101, 131)

len(close_sort)

plt.figure(figsize =(10, 7))
plt.plot(day_new, scaler.inverse_transform(close_sort[1935: ]))
plt.plot(day_pred,scaler. inverse_transform(lst_output))

"""**Append in a list is done to make continues graph**"""

df3 = close_sort.tolist()

df3.extend(lst_output)

print(len(df3))

plt.figure(figsize=(10,7))
plt.plot(df3[1935:])

"""**Plot The Graph with predicted 30 days output**"""

df3 = scaler.inverse_transform(df3).tolist()

plt.figure(figsize =(10, 7))
plt.plot(df3)
